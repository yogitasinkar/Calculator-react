{"version":3,"sources":["App.js","Buttons.js","Output.js","serviceWorker.js","index.js"],"names":["App","props","formExpression","b","state","result","setState","prevState","evaluate","eval","toFixed","toString","e","reset","ceFunc","slice","onClick","isNaN","prev","substr","className","clasName","this","React","Component","Buttons","buttons","map","brow","value","target","defaultProps","Output","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6gDAKMA,I,0fACJ,aAAYC,OAAO,IAAD,wPAChB,uBAAMA,OADU,MAQlBC,eAAiB,SAACC,GACS,UAAtB,MAAKC,MAAMC,QACZ,MAAKC,SAAS,CACZD,OAAQ,KAGZ,MAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BF,OAASE,EAAUF,OAASF,OAfd,MAmBlBK,SAAW,WACP,IACE,MAAKF,SAAS,CACRD,OAAQI,KAAK,MAAKL,MAAMC,QAAQK,QAAQ,GAAGC,aAEjD,MAAOC,GACP,MAAKN,SAAS,CACRD,OAAQ,YA1BF,MA+BlBQ,MAAQ,WACJ,MAAKP,SAAS,CACVD,OAAQ,MAjCE,MAqClBS,OAAS,WACP,MAAKR,UAAS,SAAAC,GAAS,MAAK,CAC1BF,OAASE,EAAUF,OAAOU,MAAM,GAAG,QAvCrB,MA2ClBC,QAAU,SAAAb,GAEN,GAAS,MAANA,EACC,MAAKK,gBAEJ,GAAS,MAANL,EACJ,MAAKU,aAEJ,GAAS,OAANV,EACJ,MAAKW,aAEJ,CAEH,GAAGG,MAAMd,IAAU,MAAJA,GAAe,MAAJA,EAAQ,CAChC,IAAIe,EAAO,MAAKd,MAAMC,OAAOc,QAAQ,GAClCF,MAAMC,IACP,MAAKJ,SAGT,MAAKZ,eAAeC,KA3DxB,MAAKC,MAAQ,CACXC,OAAS,IAJK,M,yQAmEhB,OACE,kEAAKe,UAAU,OACb,iEAAIC,SAAS,cAAb,cACA,kEAAKD,UAAU,YACb,2DAAC,0CAAD,CAAQf,OAAQiB,KAAKlB,MAAMC,SAC3B,2DAAC,2CAAD,CAASW,QAASM,KAAKN,gB,KAzEfO,6CAAMC,WAiFTxB,2B,6ECnFTyB,G,6KAUO,IAAD,OACR,OACE,yBAAKL,UAAU,WACZE,KAAKrB,MAAMyB,QAAQC,KAAI,SAAAC,GAAI,OACxB,yBAAKR,UAAU,eACZQ,EAAKD,KAAI,SAAAxB,GAAC,OACT,4BAAQiB,UAAU,SAASS,MAAO1B,EAAGa,QAAS,SAACJ,GAAD,OAAO,EAAKX,MAAMe,QAAQJ,EAAEkB,OAAOD,SAAS1B,e,GAhBpFoB,IAAMC,YAAtBC,EACGM,aAAe,CACpBL,QAAU,CACR,CAAC,IAAK,KAAM,IAAK,KACjB,CAAC,IAAK,IAAM,IAAK,KACjB,CAAC,IAAK,IAAM,IAAK,KACjB,CAAC,IAAK,IAAM,IAAK,KACjB,CAAC,IAAK,IAAM,IAAK,OAkBRD,O,6ECzBTO,G,6KAGF,OACE,yBAAKZ,UAAU,UACU,KAAtBE,KAAKrB,MAAMI,OACV,uBAAGe,UAAU,cAAb,OACA,2BAAIE,KAAKrB,MAAMI,a,GAPJkB,IAAMC,YAcZQ,O,oMCLKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACxC,EAAA,EAAD,OAEFyC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9c1b9a1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Buttons from './Buttons.js';\nimport Output from './Output.js';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      result : \"\"\n    }\n  }\n\n  formExpression = (b) => {\n    if(this.state.result === \"error\"){\n      this.setState({\n        result: \"\"\n      })\n    }\n    this.setState(prevState => ({\n      result : prevState.result + b\n    }));\n  }\n\n  evaluate = () => {\n      try {\n        this.setState({\n              result: eval(this.state.result).toFixed(2).toString()\n        })\n      } catch (e) {\n        this.setState({\n              result: \"error\"\n        })\n      }\n  };\n\n  reset = () => {\n      this.setState({\n          result: \"\"\n      })\n  };\n\n  ceFunc = () => {\n    this.setState(prevState => ({\n      result : prevState.result.slice(0,-1)\n    }));\n  };\n\n  onClick = b => {\n\n      if(b === \"=\"){\n          this.evaluate()\n      }\n      else if(b === \"C\"){\n          this.reset()\n      }\n      else if(b === \"CE\"){\n          this.ceFunc()\n      }\n      else {\n\n        if(isNaN(b) && b!=='(' && b!==')'){\n          var prev = this.state.result.substr(-1)\n          if(isNaN(prev)){\n            this.ceFunc();\n          }\n        }\n        this.formExpression(b)\n      }\n  };\n\n  render () {\n    return(\n      <div className=\"App\">\n        <h1 clasName=\"App-header\">Calculator</h1>\n        <div className=\"App-calc\">\n          <Output result={this.state.result}/>\n          <Buttons onClick={this.onClick}/>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\r\nimport './Buttons.css'\r\n\r\nclass Buttons extends React.Component {\r\n  static defaultProps = {\r\n    buttons : [\r\n      ['C', 'CE', '/', '*'],\r\n      ['7', '8' , '9', '-'],\r\n      ['4', '5' , '6', '+'],\r\n      ['1', '2' , '3', '.'],\r\n      ['(' ,')' , '0', '=']\r\n    ]\r\n  }\r\n  render () {\r\n    return(\r\n      <div className=\"Buttons\">\r\n        {this.props.buttons.map(brow =>\r\n            <div className=\"Buttons-row\">\r\n              {brow.map(b =>\r\n                <button className=\"Button\" value={b} onClick={(e) => this.props.onClick(e.target.value)}>{b}</button>\r\n              )}\r\n            </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport './Output.css'\r\n\r\nclass Output extends React.Component {\r\n\r\n  render () {\r\n    return(\r\n      <div className=\"Output\">\r\n        {this.props.result === \"\" ?\r\n          <p className=\"Output-def\">Ans</p> :\r\n          <p>{this.props.result}</p>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Output;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}